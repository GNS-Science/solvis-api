service: nzshm22-solvis-api
variablesResolutionMode: 20210326

plugins:
  - serverless-offline-sns
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-plugin-warmup
package:
  individually: false
  exclude:
    - .git/**
    - __pycache__/**
    - .pytest_cache/**
    - .tox/**
    - test/**
    - offline/**
    - tmp/**
    - bin/**
    - lib/**
    - .dynamodb/**
    - node_modules/**
    - prof/**
    - package.json
    - package-log.json

custom:

  # DRY constants: define all compound/generated names in one place
  # Override args are: .. defaults:
  # --app_acronym          signed-uploader
  # --s3_bucket           self:custom.app_acronym
  # --s3_key_base         self:custom.stage
  # --region              us-east-1
  # --stage               test
  # --deletion_policy     delete

  app_acronym: ${opt:acronym, self:service}
  default_stage: local
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  is_topic_name: ${self:custom.stack_name}-analyse-inversion-solution
  gt_topic_name: ${self:custom.stack_name}-analyse-general-task
  solvis_api_url: TODO-${self:custom.stage}
  http_api_path: /${self.custom.stage}
  cw_app_name_api: ${self:custom.stack_name}-API
  cw_app_name_analysis: ${self:custom.stack_name}-ANALYSIS

  #serverless-wsgi settings
  wsgi:
    app: api.api.app
    packRequirements: false
    pythonBin: python3

  #serverless-python-requirements settings
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    slimPatterns:
      - '**/*.egg-info*'
    noDeploy:
      - botocore

  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      # migrate: true
      # seed: true
      # convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: ${self:custom.stage}-solutions
            sources: [./offline/migrations/solutions-seed.json]

  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
    # accountId: ${aws:accountId} #23456789012 # Optional

  #Lambda warmer see https://www.serverless.com/plugins/serverless-plugin-warmup
  warmup:
    lowConcurrencyWarmer:
      enabled: true
      events:
        - schedule: rate(5 minutes)
      concurrency: 1

provider:
  name: aws
  runtime: python3.9
  # stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  environment:
    REGION: ${self:custom.region}
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "dynamodb:Scan"
         - "dynamodb:DescribeTable"
         - "dynamodb:CreateTable"
         - "dynamodb:GetItem"
         - "dynamodb:PutItem"
         - "dynamodb:Query"
         - "dynamodb:BatchWriteItem"
         - "SNS:Publish"
         - "SNS:ListTopics"
         - "SNS:CreateTopic"
         - "cloudwatch:PutMetricData"
       Resource: "*"

  apiGateway:
    apiKeys:
      - name: TempApiKey-${self:custom.stack_name}
        description: Api key until we have an auth function # Optional

functions:
  app:
    description: The REST API of ${self:service}
    handler: wsgi_handler.handler
    memorySize: 8192 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6

    environment:
      STACK_NAME: ${self:custom.stack_name}
      SNS_IS_TOPIC: ${self:custom.is_topic_name}
      SNS_GT_TOPIC: ${self:custom.gt_topic_name}
      SLS_OFFLINE: ${env:SLS_OFFLINE}
      DEPLOYMENT_STAGE: ${self:custom.stage}

      NZSHM22_TOSHI_API_URL: ${env:NZSHM22_TOSHI_API_URL}
      NZSHM22_TOSHI_API_ENABLED: ${env:NZSHM22_TOSHI_API_ENABLED}
      NZSHM22_TOSHI_API_KEY: ${env:NZSHM22_TOSHI_API_KEY}
      CLOUDWATCH_APP_NAME: ${self:custom.cw_app_name_api}
      LOGGING_CFG: "./api/logging.yaml"

    events:
      - http:
          path: /
          method: OPTIONS
      - http:
          path: '{proxy+}'
          method: OPTIONS
      - http:
          path: /
          method: ANY
          private: true
      - http:
          path: '{proxy+}'
          method: ANY
          private: true

    warmup:
      lowConcurrencyWarmer:
        enabled:
          - test
          - prod

  analyse-inversion-solution:
    description: The analysis handler of ${self:service}
    handler: api/process_solution.handler
    memorySize: 2048 # optional, in MB, default is 1024
    timeout: 300 # optional, in seconds, default is 6
    events:
      - sns:
          topicName: ${self:custom.is_topic_name}
    environment:
      NZSHM22_SOLVIS_API_URL: ${env:NZSHM22_SOLVIS_API_URL}
      NZSHM22_SOLVIS_API_KEY: ${env:NZSHM22_SOLVIS_API_KEY}
      NZSHM22_TOSHI_API_URL: ${env:NZSHM22_TOSHI_API_URL}
      NZSHM22_TOSHI_API_ENABLED: ${env:NZSHM22_TOSHI_API_ENABLED}
      NZSHM22_TOSHI_API_KEY: ${env:NZSHM22_TOSHI_API_KEY}
      SLS_OFFLINE: ${env:SLS_OFFLINE}
      DEPLOYMENT_STAGE: ${self:custom.stage}
      PYNAMODB_CONFIG: "./api/pynamodb_config.py"
      CLOUDWATCH_APP_NAME: ${self:custom.cw_app_name_analysis}

  analyse-general-task:
    description: The General Task handler, does a fan-out to the analyse-inversion-solution handler.
    handler: api/process_general_task.handler
    memorySize: 10240 # optional, in MB, default is 1024
    timeout: 60 # optional, in seconds, default is 6
    events:
      - sns:
          topicName: ${self:custom.gt_topic_name}
    environment:
      NZSHM22_TOSHI_API_URL: ${env:NZSHM22_TOSHI_API_URL}
      NZSHM22_TOSHI_API_ENABLED: ${env:NZSHM22_TOSHI_API_ENABLED}
      NZSHM22_TOSHI_API_KEY: ${env:NZSHM22_TOSHI_API_KEY}
      SLS_OFFLINE: ${env:SLS_OFFLINE}
      DEPLOYMENT_STAGE: ${self:custom.stage}
      SNS_IS_TOPIC: ${self:custom.is_topic_name}

